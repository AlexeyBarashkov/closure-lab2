<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1418483131877">{:repl-history {:ide [], :local [&quot;(prn url)&quot; &quot;hello&quot; &quot;(defn bar [a b]\n  {:pre [(= a b)]}\n  (println (+ a b)))&quot; &quot;(bar 2 3)&quot; &quot;(bar 3 3)&quot; &quot;(slurp \&quot;urls.txt\&quot;)&quot; &quot;(clojure.string/split-lines (slurp \&quot;urls.txt\&quot;))&quot; &quot;(.exists (clojure.jsva.io/as-file \&quot;urls.txt\&quot;))&quot; &quot;clojure.java.io&quot; &quot;'clojure.java.io&quot; &quot;(.exists ('clojure.jsva.io/as-file \&quot;urls.txt\&quot;))&quot; &quot;(.exists (clojure.java.io/as-file \&quot;urls.txt\&quot;))&quot; &quot;(.exists (clojure.java.io/as-file \&quot;urls.txta\&quot;))&quot; &quot;(-main \&quot;sf\&quot; \&quot;sdf\&quot;)&quot; &quot;(-main \&quot;urls.txt\&quot; \&quot;sdf\&quot;)&quot; &quot;(get-urls \&quot;urls.txt\&quot;)&quot; &quot;(clojure.java.io/reader \&quot;urls.txt\&quot;)&quot; &quot;(line-seq (clojure.java.io/reader \&quot;urls.txt\&quot;))&quot; &quot;(-main \&quot;urls.txt\&quot; 3)&quot; &quot;responses&quot; &quot;(swap! responses conj {:id 1 :value \&quot;google.com\&quot;})&quot; &quot;@responses&quot; &quot;(contains? @responses {:id 1 :value \&quot;google.com\&quot;})&quot; &quot;(map #(:value) @responses)&quot; &quot;(map (fn [a b] (a)) [\&quot;123\&quot; \&quot;345\&quot;])&quot; &quot;(map (fn [a] (a)) [\&quot;123\&quot; \&quot;345\&quot;])&quot; &quot;(map (fn [a] (+ a 0)) [\&quot;123\&quot; \&quot;345\&quot;])&quot; &quot;(map (fn [a] (+ a 0)) [1 2])&quot; &quot;(map (fn [a] (+ a 2)) [1 2])&quot; &quot;(map (fn [a] (:a)) [{:a \&quot;c\&quot; :b \&quot;d\&quot;} {:a \&quot;a\&quot; :b \&quot;b\&quot;}])&quot; &quot;(map (fn [a] (:a a)) [{:a \&quot;c\&quot; :b \&quot;d\&quot;} {:a \&quot;a\&quot; :b \&quot;b\&quot;}])&quot; &quot;(map (fn [response] (:value response) ) @responses)&quot; &quot;(contains? (map (fn [response] (:value response) ) @responses) \&quot;google.com\&quot;)&quot; &quot;(doseq [1 2 3] [[1] [2]] 4)&quot; &quot;(doseq [1 2 3] [[1] [2]])&quot; &quot;(doseq [1 2 3] [2 4])&quot; &quot;(doseq [1 2 3] (fn [a] (+ a 0)))&quot; &quot;(map list [1 2 3] [1 2 3])&quot; &quot;(doseq [[x y] (map list [1 2 3] [1 2 3])]\n  (prn (* x y)))&quot; &quot;(prn 4)&quot; &quot;(doseq [[x y] (map list [1 2 3] [1 2 3])])&quot; &quot;(prn 1 2)\n&quot; &quot;(doseq [[x y] (map list [1 2 3] [1 2 3])] prn)\n&quot; &quot;(doseq [[x y] (map list [1 2 3] [1 2 3])] (prn))\n&quot; &quot;(doseq [[x y] (map list [1 2 3] [1 2 3])] (prn x y))\n&quot; &quot;(defn fetch-url\n  [url]\n  (try\n    (client/get url {:throw-exceptions false})\n    (catch Object _ {:status 404 :headers nil})\n    ) #_try\n  )&quot; &quot;(defn fetch-url\n  [url]\n  (try\n    (client/get url {:throw-exceptions false})\n    (catch Exception _ {:status 404 :headers nil})\n    ) #_try\n  ) #_fn&quot; &quot;(fetch-url \&quot;google.com\&quot;)&quot; &quot;(client/get \&quot;google.com\&quot; {:throw-exceptions false})&quot; &quot;(client/get \&quot;http:\\\\google.com\&quot; {:throw-exceptions false})&quot; &quot;(client/get \&quot;http://google.com\&quot; {:throw-exceptions false})&quot; &quot;(client/get \&quot;http://google.comsdf\&quot; {:throw-exceptions false})&quot; &quot;\n(client/get \&quot;http://google.comsdf\&quot; {:throw-exceptions false})&quot; &quot;(fetch-page-by-url \&quot;google.com\&quot;)&quot; &quot;(fetch-page-by-url \&quot;google.comasdf\&quot;)&quot; &quot;(fetch-page-by-url \&quot;http://google.comasdf\&quot;)&quot; &quot;(let [href \&quot;ggsafsf\&quot;]\n  (and (and (string? href) (not (str/blank? href))) (.startsWith href \&quot;http://\&quot;)))&quot; &quot;(let [href \&quot;ggsafsf\&quot;]\n  (and (and (string? href) (not (String/blank? href))) (.startsWith href \&quot;http://\&quot;)))&quot; &quot;(String/blank? \&quot;sdf\&quot;) &quot; &quot;(clojure.string/blank? \&quot;sfd\&quot;) &quot; &quot;(clojure.string/blank? \&quot;\&quot;) &quot; &quot;(clojure.string/blank? ) &quot; &quot;(clojure.string/blank? nil) &quot; &quot;(let [href \&quot;dfs\&quot;] (and (not (clojure.string/blank? href)) (.startsWith href \&quot;http://\&quot;)))&quot; &quot;(let [href \&quot;http://dfs\&quot;] (and (not (clojure.string/blank? href)) (.startsWith href \&quot;http://\&quot;)))&quot; &quot;(let [href \&quot;\&quot;] (and (not (clojure.string/blank? href)) (.startsWith href \&quot;http://\&quot;)))&quot; &quot;(html/select \&quot;&lt;div&gt;&lt;/div&gt;\&quot;)&quot; &quot;(html/select \&quot;&lt;div&gt;&lt;/div&gt;\&quot; #{[:a]})&quot; &quot;(html/select \&quot;&lt;div&gt;&lt;/div&gt;\&quot; #{[:div]})&quot; &quot;(html/html-snippet \&quot;&lt;div&gt;&lt;/div&gt;\&quot; )&quot; &quot;(html/html-snippet \&quot;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\&quot; )&quot; &quot;node&quot; &quot;(:children node)&quot; &quot;(prn \&quot;\\n\\n\\n========== RESULTS: =========\\n\\n\\n\&quot;)&quot; &quot;(prn \&quot;\\newline\\n\\n========== RESULTS: =========\\n\\n\\n\&quot;)&quot; &quot;(newline)\n(prn \&quot;========== RESULTS: =========\&quot;)\n(newline)&quot; &quot;(-main \&quot;urls.txt\&quot; 1)&quot; &quot;(println \&quot;\&quot;)&quot; &quot;(println nil)&quot; &quot;(-main \&quot;urls.txt\&quot; 2)&quot; &quot;\n(-main \&quot;urls.txt\&quot; 2)&quot; &quot;(println \&quot;dfs\&quot; \&quot;sdf\&quot;)&quot;], :remote []}}</component>
</project>